"use strict";(self.webpackChunkcommuto_docs=self.webpackChunkcommuto_docs||[]).push([[294],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return f}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var d=a.createContext({}),p=function(e){var t=a.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=p(r),f=n,u=c["".concat(d,".").concat(f)]||c[f]||m[f]||l;return r?a.createElement(u,i(i({ref:t},s),{},{components:r})):a.createElement(u,i({ref:t},s))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,i=new Array(l);i[0]=c;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var p=2;p<l;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},478:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return d},metadata:function(){return p},toc:function(){return s},default:function(){return c}});var a=r(7462),n=r(3366),l=(r(7294),r(3905)),i=["components"],o={id:"core-tec-ref",title:"CommutoSwap Technical Reference"},d=void 0,p={unversionedId:"technical-reference/core-tec-ref",id:"technical-reference/core-tec-ref",title:"CommutoSwap Technical Reference",description:"This document describes the structs, events and functions used by the CommutoSwap smart contract.",source:"@site/docs/technical-reference/core-tec-ref.md",sourceDirName:"technical-reference",slug:"/technical-reference/core-tec-ref",permalink:"/commuto-docs/docs/technical-reference/core-tec-ref",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/technical-reference/core-tec-ref.md",tags:[],version:"current",frontMatter:{id:"core-tec-ref",title:"CommutoSwap Technical Reference"},sidebar:"tutorialSidebar",previous:{title:"Set Up A Development Environment",permalink:"/commuto-docs/docs/guides/dev-env"}},s=[{value:"Offer",id:"offer",children:[],level:2},{value:"Swap",id:"swap",children:[],level:2},{value:"OfferOpened",id:"offeropened",children:[],level:2},{value:"PriceChanged",id:"pricechanged",children:[],level:2},{value:"OfferCanceled",id:"offercanceled",children:[],level:2},{value:"OfferTaken",id:"offertaken",children:[],level:2},{value:"SwapFilled",id:"swapfilled",children:[],level:2},{value:"PaymentSent",id:"paymentsent",children:[],level:2},{value:"PaymentReceived",id:"paymentreceived",children:[],level:2},{value:"BuyerClosed",id:"buyerclosed",children:[],level:2},{value:"SellerClosed",id:"sellerclosed",children:[],level:2}],m={toc:s};function c(e){var t=e.components,r=(0,n.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This document describes the structs, events and functions used by the CommutoSwap smart contract."),(0,l.kt)("h1",{id:"structs"},"Structs"),(0,l.kt)("h2",{id:"offer"},"Offer"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"struct Offer {\n    bool isCreated;\n    bool isTaken;\n    address maker;\n    bytes interfaceId;\n    address stablecoin;\n    uint256 amountLowerBound;\n    uint256 amountUpperBound;\n    uint256 securityDepositAmount;\n    SwapDirection direction;\n    bytes price;\n    bytes[] settlementMethods;\n    uint256 protocolVersion;\n}\n")),(0,l.kt)("p",null,"This represents an offer within CommutoSwap."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"isCreated"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Used internally to check for offer existence")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"isTaken"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Used internally to check if offer is taken")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"maker"),(0,l.kt)("td",{parentName:"tr",align:"left"},"address"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The Ethereum address of the offer maker")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"bytes"),(0,l.kt)("td",{parentName:"tr",align:"left"},"interfaceId"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The maker's Commuto interface id")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"stablecoin"),(0,l.kt)("td",{parentName:"tr",align:"left"},"address"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The address of the contract of the stablecoin to be swapped")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"amountLowerBound"),(0,l.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The minimum amount of stablecoin the maker is willing to buy/sell")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"amountUpperBound"),(0,l.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The maximum amount of stablecoin the maker is willing to buy/sell")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"securityDepositAmount"),(0,l.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The amount that the maker and taker must temporarily surrender as a security deposit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"direction"),(0,l.kt)("td",{parentName:"tr",align:"left"},"SwapDirection"),(0,l.kt)("td",{parentName:"tr",align:"left"},"An enum that determines whether the maker is offering to buy or sell stablecoin")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"price"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bytes"),(0,l.kt)("td",{parentName:"tr",align:"left"},"A UTF-8 byte array describing the price of the offer, in terms of (number of FIAT units) per 1 STBL")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"settlementMethods"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bytes[]"),(0,l.kt)("td",{parentName:"tr",align:"left"},"An array of supported settlement methods by which the maker is willing to send/receive payment")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"protocolVersion"),(0,l.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Indicates for which version of CommutoSwap this offer was created")))),(0,l.kt)("h2",{id:"swap"},"Swap"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"struct Swap {\n    bool isCreated;\n    bool requiresFill;\n    address maker;\n    bytes makerInterfaceId;\n    address taker;\n    bytes takerInterfaceId;\n    address stablecoin;\n    uint256 amountLowerBound;\n    uint256 amountUpperBound;\n    uint256 securityDepositAmount;\n    uint256 takenSwapAmount;\n    uint256 serviceFeeAmount;\n    SwapDirection direction;\n    bytes price;\n    bytes settlementMethod;\n    uint256 protocolVersion;\n    bool isPaymentSent;\n    bool isPaymentReceived;\n    bool hasBuyerClosed;\n    bool hasSellerClosed;\n}\n")),(0,l.kt)("p",null,"This represents a swap within CommutoSwap."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"isCreated"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Copied from corresponding Offer struct")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"requiresFill"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Used internally for maker-as-seller trades to check if maker has filled swap")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"isTaken"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Copied from corresponding Offer struct")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"maker"),(0,l.kt)("td",{parentName:"tr",align:"left"},"address"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Copied from corresponding Offer struct")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"bytes"),(0,l.kt)("td",{parentName:"tr",align:"left"},"makerInterfaceId"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Copied from interfaceId field of corresponding Offer struct")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"taker"),(0,l.kt)("td",{parentName:"tr",align:"left"},"address"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The Ethereum address of the taker")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"bytes"),(0,l.kt)("td",{parentName:"tr",align:"left"},"takerInterfaceId"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The taker's Commuto interface id")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"stablecoin"),(0,l.kt)("td",{parentName:"tr",align:"left"},"address"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Copied from corresponding Offer struct")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"amountLowerBound"),(0,l.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Copied from corresponding Offer struct")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"amountUpperBound"),(0,l.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Copied from corresponding Offer struct")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"securityDepositAmount"),(0,l.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Copied from corresponding Offer struct")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"takenSwapAmount"),(0,l.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The amount of stablecoin the taker has decided to buy/sell (note that amountLowerBound \u2264 takenSwapAmout \u2264 amountUpperBound)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"serviceFeeAmount"),(0,l.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The amount to be paid to Commuto by both the maker and taker as a service fee")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"direction"),(0,l.kt)("td",{parentName:"tr",align:"left"},"SwapDirection"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Copied from corresponding Offer struct")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"price"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bytes"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Copied from corresponding Offer struct")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"settlementMethod"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bytes"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The settlement method by which the taker has decided to send/receive payment (note that settlementMethod must be in corresponding offer's settlementMethods field)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"protocolVersion"),(0,l.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Copied from corresponding Offer struct")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"isPaymentSent"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Used internally to check whether the buyer has sent fiat payment")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"isPaymentReceived"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Used internally to check whether the seller has received fiat payment")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"hasBuyerClosed"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Used internally to track whether the buyer has closed the swap and received their purchased stablecoin plus their security deposit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"hasSellerClosed"),(0,l.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Used internally to track whether the seller has closed the swap and received their purchased stablecoin plus their security deposit")))),(0,l.kt)("h1",{id:"events"},"Events"),(0,l.kt)("h2",{id:"offeropened"},"OfferOpened"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"OfferOpened(bytes16 offerID, bytes interfaceId)\n")),(0,l.kt)("p",null,"Emitted when a new offer is opened."),(0,l.kt)("h2",{id:"pricechanged"},"PriceChanged"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"PriceChanged(bytes16 offerID)\n")),(0,l.kt)("p",null,"Emitted when the price of an offer is changed."),(0,l.kt)("h2",{id:"offercanceled"},"OfferCanceled"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"OfferCanceled(bytes16 offerID)\n")),(0,l.kt)("p",null,"Emitted when an offer is canceled."),(0,l.kt)("h2",{id:"offertaken"},"OfferTaken"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"OfferTaken(bytes16 offerID, bytes takerInterfaceId)\n")),(0,l.kt)("p",null,"Emitted when an offer is taken."),(0,l.kt)("h2",{id:"swapfilled"},"SwapFilled"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"SwapFilled(bytes16 swapID);\n")),(0,l.kt)("p",null,"Emitted when a maker-as-seller swap is filled"),(0,l.kt)("h2",{id:"paymentsent"},"PaymentSent"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"PaymentSent(bytes16 swapID)\n")),(0,l.kt)("p",null,"Emitted when the buyer indicates that they have sent payment."),(0,l.kt)("h2",{id:"paymentreceived"},"PaymentReceived"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"PaymentReceived(bytes16 swapID)\n")),(0,l.kt)("p",null,"Emitted when the seller indicates that they have received payment"),(0,l.kt)("h2",{id:"buyerclosed"},"BuyerClosed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"BuyerClosed(bytes16 swapID)\n")),(0,l.kt)("p",null,"Emitted when the buyer closes their side of the swap."),(0,l.kt)("h2",{id:"sellerclosed"},"SellerClosed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"SellerClosed(bytes16 swapID)\n")),(0,l.kt)("p",null,"Emitted when the seller closes their side of the swap."),(0,l.kt)("h1",{id:"read-only-functions"},"Read-Only Functions"),(0,l.kt)("h1",{id:"state-changing-functions"},"State-Changing Functions"))}c.isMDXComponent=!0}}]);