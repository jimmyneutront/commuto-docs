"use strict";(self.webpackChunkcommuto_docs=self.webpackChunkcommuto_docs||[]).push([[294],{3905:function(t,e,r){r.d(e,{Zo:function(){return m},kt:function(){return f}});var a=r(7294);function n(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,a)}return r}function l(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){n(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function i(t,e){if(null==t)return{};var r,a,n=function(t,e){if(null==t)return{};var r,a,n={},o=Object.keys(t);for(a=0;a<o.length;a++)r=o[a],e.indexOf(r)>=0||(n[r]=t[r]);return n}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)r=o[a],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(n[r]=t[r])}return n}var d=a.createContext({}),p=function(t){var e=a.useContext(d),r=e;return t&&(r="function"==typeof t?t(e):l(l({},e),t)),r},m=function(t){var e=p(t.components);return a.createElement(d.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(t,e){var r=t.components,n=t.mdxType,o=t.originalType,d=t.parentName,m=i(t,["components","mdxType","originalType","parentName"]),c=p(r),f=n,u=c["".concat(d,".").concat(f)]||c[f]||s[f]||o;return r?a.createElement(u,l(l({ref:e},m),{},{components:r})):a.createElement(u,l({ref:e},m))}));function f(t,e){var r=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var o=r.length,l=new Array(o);l[0]=c;var i={};for(var d in e)hasOwnProperty.call(e,d)&&(i[d]=e[d]);i.originalType=t,i.mdxType="string"==typeof t?t:n,l[1]=i;for(var p=2;p<o;p++)l[p]=r[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},478:function(t,e,r){r.r(e),r.d(e,{frontMatter:function(){return i},contentTitle:function(){return d},metadata:function(){return p},toc:function(){return m},default:function(){return c}});var a=r(7462),n=r(3366),o=(r(7294),r(3905)),l=["components"],i={id:"core-tec-ref",title:"CommutoSwap Technical Reference"},d=void 0,p={unversionedId:"technical-reference/core-tec-ref",id:"technical-reference/core-tec-ref",title:"CommutoSwap Technical Reference",description:"This document describes the structs, events and functions used by the CommutoSwap smart contract.",source:"@site/docs/technical-reference/core-tec-ref.md",sourceDirName:"technical-reference",slug:"/technical-reference/core-tec-ref",permalink:"/commuto-docs/docs/technical-reference/core-tec-ref",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/technical-reference/core-tec-ref.md",tags:[],version:"current",frontMatter:{id:"core-tec-ref",title:"CommutoSwap Technical Reference"},sidebar:"tutorialSidebar",previous:{title:"Set Up A Development Environment",permalink:"/commuto-docs/docs/guides/dev-env"}},m=[{value:"Offer",id:"offer",children:[],level:2},{value:"Swap",id:"swap",children:[],level:2}],s={toc:m};function c(t){var e=t.components,r=(0,n.Z)(t,l);return(0,o.kt)("wrapper",(0,a.Z)({},s,r,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This document describes the structs, events and functions used by the CommutoSwap smart contract."),(0,o.kt)("h1",{id:"structs"},"Structs"),(0,o.kt)("h2",{id:"offer"},"Offer"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"struct Offer {\n    bool isCreated;\n    bool isTaken;\n    address maker;\n    bytes interfaceId;\n    address stablecoin;\n    uint256 amountLowerBound;\n    uint256 amountUpperBound;\n    uint256 securityDepositAmount;\n    SwapDirection direction;\n    bytes price;\n    bytes[] settlementMethods;\n    uint256 protocolVersion;\n}\n")),(0,o.kt)("p",null,"This represents an offer within CommutoSwap."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"isCreated"),(0,o.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Used internally to check for offer existence")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"isTaken"),(0,o.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Used internally to check if offer is taken")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"maker"),(0,o.kt)("td",{parentName:"tr",align:"left"},"address"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The Ethereum address of the offer maker")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"bytes"),(0,o.kt)("td",{parentName:"tr",align:"left"},"interfaceId"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The maker's Commuto interface id")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"stablecoin"),(0,o.kt)("td",{parentName:"tr",align:"left"},"address"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The address of the contract of the stablecoin to be swapped")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"amountLowerBound"),(0,o.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The minimum amount of stablecoin the maker is willing to buy/sell")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"amountUpperBound"),(0,o.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The maximum amount of stablecoin the maker is willing to buy/sell")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"securityDepositAmount"),(0,o.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The amount that the maker and taker must temporarily surrender as a security deposit")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"direction"),(0,o.kt)("td",{parentName:"tr",align:"left"},"SwapDirection"),(0,o.kt)("td",{parentName:"tr",align:"left"},"An enum that determines whether the maker is offering to buy or sell stablecoin")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"price"),(0,o.kt)("td",{parentName:"tr",align:"left"},"bytes"),(0,o.kt)("td",{parentName:"tr",align:"left"},"A UTF-8 byte array describing the price of the offer, in terms of (number of FIAT units) per 1 STBL")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"settlementMethods"),(0,o.kt)("td",{parentName:"tr",align:"left"},"bytes[]"),(0,o.kt)("td",{parentName:"tr",align:"left"},"An array of supported settlement methods by which the maker is willing to send/receive payment")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"protocolVersion"),(0,o.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Indicates for which version of CommutoSwap this offer was created")))),(0,o.kt)("h2",{id:"swap"},"Swap"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"struct Swap {\n    bool isCreated;\n    bool requiresFill;\n    address maker;\n    bytes makerInterfaceId;\n    address taker;\n    bytes takerInterfaceId;\n    address stablecoin;\n    uint256 amountLowerBound;\n    uint256 amountUpperBound;\n    uint256 securityDepositAmount;\n    uint256 takenSwapAmount;\n    uint256 serviceFeeAmount;\n    SwapDirection direction;\n    bytes price;\n    bytes settlementMethod;\n    uint256 protocolVersion;\n    bool isPaymentSent;\n    bool isPaymentReceived;\n    bool hasBuyerClosed;\n    bool hasSellerClosed;\n}\n")),(0,o.kt)("p",null,"This represents a swap within CommutoSwap."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"isCreated"),(0,o.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Copied from corresponding Offer struct")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"requiresFill"),(0,o.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Used internally for maker-as-seller trades to check if maker has filled swap")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"isTaken"),(0,o.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Copied from corresponding Offer struct")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"maker"),(0,o.kt)("td",{parentName:"tr",align:"left"},"address"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Copied from corresponding Offer struct")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"bytes"),(0,o.kt)("td",{parentName:"tr",align:"left"},"makerInterfaceId"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Copied from interfaceId field of corresponding Offer struct")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"taker"),(0,o.kt)("td",{parentName:"tr",align:"left"},"address"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The Ethereum address of the taker")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"bytes"),(0,o.kt)("td",{parentName:"tr",align:"left"},"takerInterfaceId"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The taker's Commuto interface id")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"stablecoin"),(0,o.kt)("td",{parentName:"tr",align:"left"},"address"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Copied from corresponding Offer struct")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"amountLowerBound"),(0,o.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Copied from corresponding Offer struct")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"amountUpperBound"),(0,o.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Copied from corresponding Offer struct")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"securityDepositAmount"),(0,o.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Copied from corresponding Offer struct")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"takenSwapAmount"),(0,o.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The amount of stablecoin the taker has decided to buy/sell (note that amountLowerBound \u2264 takenSwapAmout \u2264 amountUpperBound)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"serviceFeeAmount"),(0,o.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The amount to be paid to Commuto by both the maker and taker as a service fee")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"direction"),(0,o.kt)("td",{parentName:"tr",align:"left"},"SwapDirection"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Copied from corresponding Offer struct")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"price"),(0,o.kt)("td",{parentName:"tr",align:"left"},"bytes"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Copied from corresponding Offer struct")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"settlementMethod"),(0,o.kt)("td",{parentName:"tr",align:"left"},"bytes"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The settlement method by which the taker has decided to send/receive payment (note that settlementMethod must be in corresponding offer's settlementMethods field)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"protocolVersion"),(0,o.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Copied from corresponding Offer struct")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"isPaymentSent"),(0,o.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Used internally to check whether the buyer has sent fiat payment")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"isPaymentReceived"),(0,o.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Used internally to check whether the seller has received fiat payment")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"hasBuyerClosed"),(0,o.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Used internally to track whether the buyer has closed the swap and received their purchased stablecoin plus their security deposit")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"hasSellerClosed"),(0,o.kt)("td",{parentName:"tr",align:"left"},"bool"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Used internally to track whether the seller has closed the swap and received their purchased stablecoin plus their security deposit")))),(0,o.kt)("h1",{id:"events"},"Events"),(0,o.kt)("h1",{id:"read-only-functions"},"Read-Only Functions"),(0,o.kt)("h1",{id:"state-changing-functions"},"State-Changing Functions"))}c.isMDXComponent=!0}}]);