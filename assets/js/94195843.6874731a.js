"use strict";(self.webpackChunkcommuto_docs=self.webpackChunkcommuto_docs||[]).push([[377],{2669:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return m}});var o=n(3117),i=n(102),r=(n(7294),n(3905)),a=["components"],c={id:"rev-dist-tec-ref",title:"Commuto Revenue Distribution Technical Reference"},l=void 0,u={unversionedId:"technical-reference/rev-dist-tec-ref",id:"technical-reference/rev-dist-tec-ref",title:"Commuto Revenue Distribution Technical Reference",description:"The Commuto Protocol's Primary Timelock and the Commuto Token contract are used to distribute stablecoin revenue to",source:"@site/docs/technical-reference/rev-dist-tec-ref.md",sourceDirName:"technical-reference",slug:"/technical-reference/rev-dist-tec-ref",permalink:"/docs/technical-reference/rev-dist-tec-ref",draft:!1,editUrl:"https://github.com/jimmyneutront/commuto-docs/tree/master/docs/technical-reference/rev-dist-tec-ref.md",tags:[],version:"current",frontMatter:{id:"rev-dist-tec-ref",title:"Commuto Revenue Distribution Technical Reference"},sidebar:"tutorialSidebar",previous:{title:"CommutoSwap Technical Reference",permalink:"/docs/technical-reference/core-tec-ref"}},s={},m=[{value:"RevenueDistributionSnapshot (in CommutoToken)",id:"revenuedistributionsnapshot-in-commutotoken",level:2},{value:"TimelockChanged (in CommutoToken)",id:"timelockchanged-in-commutotoken",level:2},{value:"RevenueCollectionPeriodChanged (in CommutoToken)",id:"revenuecollectionperiodchanged-in-commutotoken",level:2},{value:"RevenueDistributionSnapshotTaken (in CommutoToken)",id:"revenuedistributionsnapshottaken-in-commutotoken",level:2},{value:"RevenueCollected (in CommutoToken)",id:"revenuecollected-in-commutotoken",level:2},{value:"Get Revenue Distribution Snapshot (in CommutoToken)",id:"get-revenue-distribution-snapshot-in-commutotoken",level:2},{value:"Get Latest Revenue Collection (in CommutoToken)",id:"get-latest-revenue-collection-in-commutotoken",level:2},{value:"Get Revenue Collection Period (in CommutoToken)",id:"get-revenue-collection-period-in-commutotoken",level:2},{value:"Take Revenue Distribution Snapshot (in CommutoToken)",id:"take-revenue-distribution-snapshot-in-commutotoken",level:2},{value:"Collect Revenue (in CommutoToken)",id:"collect-revenue-in-commutotoken",level:2},{value:"Change Timelock (in CommutoToken)",id:"change-timelock-in-commutotoken",level:2},{value:"Change Revenue Collection Period (in CommutoToken)",id:"change-revenue-collection-period-in-commutotoken",level:2}],d={toc:m};function p(e){var t=e.components,n=(0,i.Z)(e,a);return(0,r.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The Commuto Protocol's Primary Timelock and the Commuto Token contract are used to distribute stablecoin revenue to\nCommuto Token holders, as described in the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jimmyneutront/commuto-whitepaper/blob/main/commuto-whitepaper.txt"},"whitepaper"),". The Primary Timelock\ncontract is based on OpenZepplin's\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.openzeppelin.com/contracts/4.x/api/governance#TimelockController"},"TimelockController"),", and the Commuto\nToken contract is based on OpenZepplin's\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.openzeppelin.com/contracts/4.x/api/token/erc20#ERC20Snapshot"},"ERC20Snapshot"),". Complete documentation on\nOpenZepplin contracts can be found\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.openzeppelin.com/contracts/4.x/"},"here"),". This document describes only the structs, events, and functions\nunique to the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jimmyneutront/commuto-protocol/blob/main/libraries/governance/CommutoGovernor.sol"},"CommutoGovernor"),"\nand ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jimmyneutront/commuto-protocol/blob/main/libraries/governance/CommutoToken.sol"},"CommutoToken"),"\ncontracts, not those inherited from their parent contracts."),(0,r.kt)("h1",{id:"structs"},"Structs"),(0,r.kt)("h2",{id:"revenuedistributionsnapshot-in-commutotoken"},"RevenueDistributionSnapshot (in CommutoToken)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"struct RevenueDistributionSnapshot {\n    uint256 block;\n    uint256 snapshotId;\n    uint256 balance;\n}\n")),(0,r.kt)("p",null,"This represents a Revenue Distribution Snapshot within CommutoToken."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"block"),(0,r.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The block in which this Revenue Distribution Snapshot was taken")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"snapshotId"),(0,r.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The id of the snapshot of CommutoToken balances taken when this Revenue Distribution Snapshot was created")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"balance"),(0,r.kt)("td",{parentName:"tr",align:"left"},"uint256"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The amount of the specified stablecoin held by the CommutoToken contract when this Revenue Distribution Snapshot was taken")))),(0,r.kt)("h1",{id:"events"},"Events"),(0,r.kt)("h2",{id:"timelockchanged-in-commutotoken"},"TimelockChanged (in CommutoToken)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event TimelockChanged(address oldTimelock, address newTimelock);\n")),(0,r.kt)("p",null,"Emitted when the old Timelock transfers control of CommutoToken to a new Timelock"),(0,r.kt)("h2",{id:"revenuecollectionperiodchanged-in-commutotoken"},"RevenueCollectionPeriodChanged (in CommutoToken)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event RevenueCollectionPeriodChanged(uint256 oldPeriod, uint256 newPeriod);\n")),(0,r.kt)("p",null,"Emitted when the Revenue Collection Period is changed"),(0,r.kt)("h2",{id:"revenuedistributionsnapshottaken-in-commutotoken"},"RevenueDistributionSnapshotTaken (in CommutoToken)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event RevenueDistributionSnapshotTaken(address stablecoin, uint256 snapshotId, uint256 balance);\n")),(0,r.kt)("p",null,"Emitted when a Revenue Distribution Snapshot is taken"),(0,r.kt)("h2",{id:"revenuecollected-in-commutotoken"},"RevenueCollected (in CommutoToken)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"event RevenueCollected(address stablecoin, address collector, address recipient, uint256 amount);\n")),(0,r.kt)("p",null,"Emitted when revenue is collected"),(0,r.kt)("h1",{id:"read-only-functions"},"Read-Only Functions"),(0,r.kt)("h2",{id:"get-revenue-distribution-snapshot-in-commutotoken"},"Get Revenue Distribution Snapshot (in CommutoToken)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function getRevenueDistributionSnapshot(address stablecoin) view public returns (RevenueDistributionSnapshot memory)\n")),(0,r.kt)("p",null,"Returns the latest Revenue Distribution Snapshot for the specified stablecoin"),(0,r.kt)("h2",{id:"get-latest-revenue-collection-in-commutotoken"},"Get Latest Revenue Collection (in CommutoToken)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function getLatestRevenueCollection(address stablecoin, address account) view public returns (uint256)\n")),(0,r.kt)("p",null,"Returns the number of the block in which the specified account last collected revenue in the specified stablecoin"),(0,r.kt)("h2",{id:"get-revenue-collection-period-in-commutotoken"},"Get Revenue Collection Period (in CommutoToken)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function getRevenueCollectionPeriod() public view returns (uint256)\n")),(0,r.kt)("p",null,"Returns the current Revenue Collection Period, in blocks."),(0,r.kt)("h1",{id:"state-changing-functions"},"State-Changing Functions"),(0,r.kt)("h2",{id:"take-revenue-distribution-snapshot-in-commutotoken"},"Take Revenue Distribution Snapshot (in CommutoToken)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function takeRevenueDistributionSnapshot(address stablecoin) public\n")),(0,r.kt)("p",null,"Create a new Revenue Distribution Period Snapshot for the specified stablecoin"),(0,r.kt)("h2",{id:"collect-revenue-in-commutotoken"},"Collect Revenue (in CommutoToken)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function collectRevenue(address stablecoin, address recipient) public\n")),(0,r.kt)("p",null,"Collect revenue in the specified stablecoin, and transfer it to the specified recipient"),(0,r.kt)("h2",{id:"change-timelock-in-commutotoken"},"Change Timelock (in CommutoToken)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function changeTimelock(address newTimelock) public\n")),(0,r.kt)("p",null,"Give a new Timelock control over CommutoToken. (This function can only be called by the current Timelock)"),(0,r.kt)("h2",{id:"change-revenue-collection-period-in-commutotoken"},"Change Revenue Collection Period (in CommutoToken)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function changeRevenueCollectionPeriod(uint256 newRevenueCollectionPeriod) public\n")),(0,r.kt)("p",null,"Set a new Revenue Collection Period. (This function can only be called by the current Timelock)"))}p.isMDXComponent=!0},3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return p}});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),u=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=u(e.components);return o.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=u(n),p=i,k=d["".concat(l,".").concat(p)]||d[p]||m[p]||r;return n?o.createElement(k,a(a({ref:t},s),{},{components:n})):o.createElement(k,a({ref:t},s))}));function p(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var u=2;u<r;u++)a[u]=n[u];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);